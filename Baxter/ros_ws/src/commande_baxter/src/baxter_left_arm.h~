/**** Bruno DATO M1 EEA ISTR Université Paul Sabatier Toulouse III 2016 ****/

#ifndef left_ARM
#define left_ARM

#include <ros/ros.h>


#include "std_msgs/Bool.h"
#include "commande_baxter/bool_state.h" 

#include "baxter_core_msgs/JointCommand.h"
#include "baxter_core_msgs/EndEffectorCommand.h"

#include "sensor_msgs/Range.h"
#include "sensor_msgs/JointState.h"
#include "baxter_core_msgs/EndpointState.h"
#include "baxter_core_msgs/EndEffectorState.h"

#include "baxter_core_msgs/SolvePositionIK.h"

class Baxter_left_arm 
{
		// Atributs //

private:

	//Publishers
	ros::Publisher pub_joint_cmd, pub_gripper_cmd, pub_prise_effectuee, pub_attente_prise ;

	//Subscribers
	ros::Subscriber sub_joint_states, sub_endpoint_state, sub_gripper_state, sub_prise_demandee ;

	//Client
	ros::ServiceClient client_inverse_kinematics, client_prise_effectuee, client_attente_prise ;

	//Server
	ros::ServiceServer srv_prise_demandee ;


public:

	// Commande	

	baxter_core_msgs::JointCommand msg_JointCommand ;
	baxter_core_msgs::EndEffectorCommand msg_EndEffectorCommand;
	std_msgs::Bool msg_prise_demandee , msg_prise_effectuee, msg_attente_prise;

	// Capteurs

	sensor_msgs::JointState jointState ;
	baxter_core_msgs::EndpointState endpointState ;
	baxter_core_msgs::EndEffectorState endEffectorState;

	
		// Méthodes //

	// Constructeur et desctructeur
	Baxter_left_arm(ros::NodeHandle noeud);
	~Baxter_left_arm();

	// Callbacks
	void Callback_joint_states(const sensor_msgs::JointState& msg);
	void Callback_endpoint_state(const baxter_core_msgs::EndpointState& msg);
	void Callback_gripper_state(const baxter_core_msgs::EndEffectorState& msg);
	void Callback_prise_demandee(const std_msgs::Bool& msg);

	// Services
	bool Srv_prise_demandee(commande_baxter::bool_state::Request  &req,
         commande_baxter::bool_state::Response &res);

	// Commande bras gauche

	// Modifie la position catésienne (x,y,z) et l'orientation : angles d'euler (psy,teta,phi)
	void IK(float x, float y, float z, float psy, float teta, float phi);

	// Modifie la position de tous les angles du bras
	void Position(float left_s0, float left_s1, float left_e0, float left_e1, float left_w0, float left_w1, float left_w2);

	// Modifie la position d'un seul angle
	void Position(float angle,int num);

	// Commande pince
	void Prise();
	void Pose();

	// Positions pour la MEF
	void Position_attente();
	void Position_prise();
	void Position_pose();
	void Descente_prise();
	void Descente_pose();

	// Communication avec la ligne transitique 	
	void Prise_effectuee();
	void Attente_prise();
	bool Prise_demmandee();

	// Tests pour la MEF
	bool Pince_fermee();
	bool Pince_fermee_pos();
	bool Pince_ouverte();

	bool vitesse_nulle();
	bool Position(float x, float y, float z);

	bool Position_prise_OK();
	bool Position_pose_OK();
	bool Descente_pose_OK();
	bool Descente_prise_OK();

	// Envoi des commandes
	void Update();
};


#endif
