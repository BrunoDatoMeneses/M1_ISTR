#include "ros/ros.h"
#include "baxter_core_msgs/JointCommand.h"
#include "baxter_core_msgs/EndEffectorCommand.h"

int main(int argc, char **argv)
{
  ros::init(argc, argv, "baxter_arm_joint_pub");
  ros::NodeHandle n;
  ros::Publisher left_cmd_pub = n.advertise<baxter_core_msgs::JointCommand>("/robot/limb/left/joint_command", 1);

  ros::Publisher right_cmd_pub = n.advertise<baxter_core_msgs::JointCommand>("/robot/limb/right/joint_command", 1);
  ros::Publisher right_gripper_cmd_pub = n.advertise<baxter_core_msgs::EndEffectorCommand>("/robot/end_effector/right_gripper/command", 1);
  ros::Publisher left_gripper_cmd_pub = n.advertise<baxter_core_msgs::EndEffectorCommand>("/robot/end_effector/left_gripper/command", 1);




  // publish at at least 5 Hz, or else Baxter switches back to Position mode and holds position
  ros::Rate loop_rate(100);

  baxter_core_msgs::JointCommand cmd_left;
  baxter_core_msgs::JointCommand cmd_right;
  baxter_core_msgs::EndEffectorCommand cmd_right_gripper;
  baxter_core_msgs::EndEffectorCommand cmd_left_gripper;

  // command in position mode
  cmd_left.mode = baxter_core_msgs::JointCommand::POSITION_MODE;
  cmd_right.mode = baxter_core_msgs::JointCommand::POSITION_MODE;

  // command joints in the order shown in baxter_interface
  cmd_left.names.push_back("left_s0");
  cmd_left.names.push_back("left_s1");
  cmd_left.names.push_back("left_e0");
  cmd_left.names.push_back("left_e1");
  cmd_left.names.push_back("left_w0");
  cmd_left.names.push_back("left_w1");
  cmd_left.names.push_back("left_w2");

  cmd_left.names.push_back("head_nod");
  cmd_left.names.push_back("head_pan");
  cmd_left.names.push_back("torso_t0");

  cmd_right.names.push_back("right_s0");
  cmd_right.names.push_back("right_s1");
  cmd_right.names.push_back("right_e0");
  cmd_right.names.push_back("right_e1");
  cmd_right.names.push_back("right_w0");
  cmd_right.names.push_back("right_w1");
  cmd_right.names.push_back("right_w2");

  // set your calculated positions
  cmd_left.command.resize(cmd_left.names.size());
  cmd_right.command.resize(cmd_right.names.size());
  /*for(size_t i = 0; i < cmd_left.names.size(); i++)
    {
	cmd_left.command[i] = 0.5;
	cmd_right.command[i] = 0.0;
    }*/

  cmd_left.command[0] = 0.2;
  cmd_left.command[1] = 0.0;
  cmd_left.command[2] = 0.0;
  cmd_left.command[3] = 0.7;
  cmd_left.command[4] = 0.0;
  cmd_left.command[5] = 1;
  cmd_left.command[6] = 0.5;

  cmd_left.command[7] = 0.1;
  cmd_left.command[8] = 0.1;
  cmd_left.command[9] = -10;

  cmd_right.command[0] = -2.5;
  cmd_right.command[1] = 0.0;
  cmd_right.command[2] = 0.0;
  cmd_right.command[3] = 0.0;
  cmd_right.command[4] = 0.0;
  cmd_right.command[5] = 1;
  cmd_right.command[6] = 0.5;


  cmd_right_gripper.id = 65538;
  cmd_right_gripper.command = cmd_right_gripper.CMD_GRIP;

  cmd_left_gripper.id = 65538;
  cmd_left_gripper.command = cmd_left_gripper.CMD_GRIP;
  
 
    
  std::cout<<cmd_left<<std::endl;
  std::cout<<cmd_right<<std::endl;
  std::cout<<cmd_right_gripper<<std::endl;

  while(ros::ok()){
    //update  commands here
    left_cmd_pub.publish(cmd_left);
    right_cmd_pub.publish(cmd_right);
    right_gripper_cmd_pub.publish(cmd_right_gripper);
    left_gripper_cmd_pub.publish(cmd_left_gripper);
    ros::spinOnce();
    loop_rate.sleep();
  }
  return 0;
}
